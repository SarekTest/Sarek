<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>9</version>
  </parent>

  <groupId>dev.sarek</groupId>
  <artifactId>sarek-parent</artifactId>
  <!-- TODO after first non-snapshot Maven Central release: comment https://issues.sonatype.org/browse/OSSRH-59166 -->
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <organization>
    <name>Scrum-Master.de - Agile Project Management</name>
    <url>https://scrum-master.de</url>
  </organization>

  <scm>
    <url>https://github.com/SarekTest/Sarek</url>
    <connection>scm:git:https://github.com/SarekTest/Sarek.git</connection>
    <developerConnection>scm:git:git@github.com:SarekTest/Sarek.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>

    <bytebuddy.version>1.10.13</bytebuddy.version>
    <!-- TODO: remove after fix for https://github.com/jboss-javassist/javassist/issues/328 is released-->
    <javassist.version>3.27.0-GA-bugfix-328</javassist.version>
    <!--<javassist.version>3.27.0-GA</javassist.version>-->
    <objenesis.version>3.1</objenesis.version>
    <junit4.version>4.13</junit4.version>
    <junit5.version>5.6.2</junit5.version>
    <testng.version>7.1.0</testng.version>

    <!--
      Defined by build-helper:rootlocation.
      Unfortunately, for IntelliJ IDEA we still need "-DprojectRootDir=..." in <projectRootDir>/.mvn/jvm.config.
    -->
    <!--suppress UnresolvedMavenProperty -->
    <projectRootDir>${rootlocation}</projectRootDir>

    <sarek.jar>
      ${projectRootDir}/sarek/target/sarek-${project.version}.jar
    </sarek.jar>
    <sarek-special.jar>
      ${projectRootDir}/sarek-special/target/sarek-special-${project.version}.jar
    </sarek-special.jar>
    <unfinal.jar>
      ${projectRootDir}/sarek-unfinal/target/sarek-unfinal-${project.version}.jar
    </unfinal.jar>
    <unfinal-special.jar>
      ${projectRootDir}/sarek-unfinal-special/target/sarek-unfinal-special-${project.version}.jar
    </unfinal-special.jar>
    <instrumented-jre.jar>
      ${projectRootDir}/sarek-test-parent/sarek-test-instrument-jre/target/sarek-test-instrument-jre-${project.version}.jar
    </instrumented-jre.jar>

    <!--
      If you want to build from an IDE like IDEA or Eclipse and use GnuPG version >= v2.0, set the parameter to true in
      order to get a nice GUI dialog for entering the passphrase. If you want to build from a console, set it to false
      or override it via -DgpgGuiPassphrase=false.
    -->
    <gpgGuiPassphrase>false</gpgGuiPassphrase>

    <!--
      If you have multiple GnuPG signing keys on your keyring, the first one is used as the default key. In order to use
      another one, specify the desired key ID here, otherwise you may just leave the parameter empty or override it via
      -DgpgKeyId=. It does not hurt to always specify it, though.
    -->
    <gpgKeyId>70CC1444</gpgKeyId>

  </properties>

  <build>
    <pluginManagement>
      <plugins>

        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <encoding>${project.build.sourceEncoding}</encoding>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.2.0</version>
          <configuration>
            <archive>
              <addMavenDescriptor>false</addMavenDescriptor>
            </archive>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.2.0</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <phase>package</phase>
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>

        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
          <configuration>
            <installAtEnd>true</installAtEnd>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
          <configuration>
            <deployAtEnd>true</deployAtEnd>
          </configuration>
        </plugin>

        <plugin>
          <!--
            Quick release process, after you ran all tests already from a clean work directory:
              1a) Prepare release, skipping tests:
                  mvn release:prepare ‐Darguments=‐DskipTests
              1b) Even quicker: don't compile tests
                  mvn release:prepare ‐Darguments=‐Dmaven.test.skip=true
              1c) Even quicker still: don't build anything, just run clean goal:
                  mvn release:prepare ‐DpreparationGoals=clean
              2a) Perform release, skipping tests:
                  mvn release:perform ‐Darguments=‐DskipTests
              2b) Even quicker: don't compile tests
                  mvn release:perform ‐Darguments=‐Dmaven.test.skip=true
              3)  Push commits + release tag
                  git push origin master ‐‐tags
            Note: '-Psonatype-oss-release' is already preconfigured in the Sonatype parent POM.
          -->
          <artifactId>maven-release-plugin</artifactId>
          <version>2.5.3</version>
          <configuration>
            <!-- Submodules automatically get parent version -->
            <autoVersionSubmodules>true</autoVersionSubmodules>
            <!-- Release tags look like 'release/1.0.0' -->
            <tagNameFormat>release/@{project.version}</tagNameFormat>
            <!--
              Do not push Git commits + release tag to up-stream repository during 'release:prepare', just in case
              something goes wrong during the release. It is easier to revert locally than on GitHub. But do not forget
              'git push origin ‐‐tags' after a successful 'release:perform'.
            -->
            <pushChanges>false</pushChanges>
            <!-- Because of 'pushChanges=false', 'release:perform' needs to check out locally -->
            <localCheckout>true</localCheckout>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <!--
            TODO:
              - Switch to next milestone or stable release as soon as available on Maven Central
              - Attention: 3.0.0-RC1 is changing + unstable, e.g. freezes when running ITs with active agents
              - Attention: M5 has the same problems as RC1, see https://issues.apache.org/jira/browse/SUREFIRE-1788
                The reason is https://issues.apache.org/jira/browse/SUREFIRE-1809, to be fixed in M6. Thus
          -->
          <version>3.0.0-M5</version>
          <configuration>
            <!-- Fix for "[WARNING] Corrupted STDOUT by directly writing to native stream in forked JVM" -->
            <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>
            <systemPropertyVariables>
              <sarek.jar>${sarek.jar}</sarek.jar>
              <sarek-special.jar>${sarek-special.jar}</sarek-special.jar>
              <unfinal.jar>${unfinal.jar}</unfinal.jar>
              <unfinal-special.jar>${unfinal-special.jar}</unfinal-special.jar>
              <dev.sarek.agent.path>${sarek.jar}</dev.sarek.agent.path>
              <!-- Necessary for SarekJUnit5Extension auto-detection -->
              <junit.jupiter.extensions.autodetection.enabled>true</junit.jupiter.extensions.autodetection.enabled>
            </systemPropertyVariables>
            <!-- TODO: Got to use this until SUREFIRE-1809 is fixed in M6 -->
            <useModulePath>false</useModulePath>
            <!--
            <consoleOutputReporter implementation="org.apache.maven.plugin.surefire.extensions.SurefireConsoleOutputReporter">
              &lt;!&ndash; Suppress Surefire/Failsafe output in favour of test output only &ndash;&gt;
              <disable>true</disable>
              <encoding>UTF-8</encoding>
            </consoleOutputReporter>
            -->
          </configuration>
          <executions>
            <execution>
              <id>reuse-jvm</id>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <!-- One JVM for multiple test classes -->
                <reuseForks>true</reuseForks>
                <excludedGroups>dev.sarek.test.util.SeparateJVM</excludedGroups>
              </configuration>
            </execution>
            <execution>
              <id>separate-jvm</id>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <!-- One JVM per test class (per method is not possible) -->
                <reuseForks>false</reuseForks>
                <groups>dev.sarek.test.util.SeparateJVM</groups>
              </configuration>
            </execution>
            <!-- We have two other, mutually exclusive text executions already and do not need this one -->
            <execution>
              <!-- We have two other, mutually exclusive text executions already and do not need this one -->
              <id>default-test</id>
              <phase>none</phase>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <!--
            TODO:
              - Switch to next milestone or stable release as soon as available on Maven Central
              - Attention: 3.0.0-RC1 is changing + unstable, e.g. freezes when running ITs with active agents
              - Attention: M5 has the same problems as RC1, see https://issues.apache.org/jira/browse/SUREFIRE-1788
                The reason is https://issues.apache.org/jira/browse/SUREFIRE-1809, to be fixed in M6. Thus
          -->
          <version>3.0.0-M5</version>
          <configuration>
            <!-- Fix for "[WARNING] Corrupted STDOUT by directly writing to native stream in forked JVM" -->
            <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>
            <systemPropertyVariables>
              <sarek.jar>${sarek.jar}</sarek.jar>
              <sarek-special.jar>${sarek-special.jar}</sarek-special.jar>
              <unfinal.jar>${unfinal.jar}</unfinal.jar>
              <unfinal-special.jar>${unfinal-special.jar}</unfinal-special.jar>
              <dev.sarek.agent.path>${sarek.jar}</dev.sarek.agent.path>
              <!-- Necessary for SarekJUnit5Extension auto-detection -->
              <junit.jupiter.extensions.autodetection.enabled>true</junit.jupiter.extensions.autodetection.enabled>
            </systemPropertyVariables>
            <!-- TODO: Got to use this until SUREFIRE-1809 is fixed in M6 -->
            <useModulePath>false</useModulePath>
            <!--
            <consoleOutputReporter implementation="org.apache.maven.plugin.surefire.extensions.SurefireConsoleOutputReporter">
              &lt;!&ndash; Suppress Surefire/Failsafe output in favour of test output only &ndash;&gt;
              <disable>true</disable>
              <encoding>UTF-8</encoding>
            </consoleOutputReporter>
            -->
          </configuration>
          <executions>
            <execution>
              <id>reuse-jvm</id>
              <goals>
                <goal>integration-test</goal>
              </goals>
              <configuration>
                <!-- One JVM for multiple test classes -->
                <reuseForks>true</reuseForks>
                <excludedGroups>dev.sarek.test.util.SeparateJVM</excludedGroups>
              </configuration>
            </execution>
            <execution>
              <id>separate-jvm</id>
              <goals>
                <goal>integration-test</goal>
              </goals>
              <configuration>
                <!-- One JVM per test class (per method is not possible) -->
                <reuseForks>false</reuseForks>
                <groups>dev.sarek.test.util.SeparateJVM</groups>
              </configuration>
            </execution>
            <execution>
              <goals>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>

        <plugin>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.2.3</version>
          <configuration>
            <createSourcesJar>true</createSourcesJar>
            <createDependencyReducedPom>false</createDependencyReducedPom>
            <shadedArtifactAttached>false</shadedArtifactAttached>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>1.2.2</version>
          <executions>
            <!-- Remove shaded dependencies from uber JAR -->
            <execution>
              <id>flatten</id>
              <phase>process-resources</phase>
              <goals>
                <goal>flatten</goal>
              </goals>
              <configuration>
                <flattenMode>oss</flattenMode>
                <pomElements>
                  <dependencies>remove</dependencies>
                </pomElements>
                <outputDirectory>${project.build.directory}</outputDirectory>
                <flattenedPomFilename>flattened-pom.xml</flattenedPomFilename>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.0.0-M3</version>
          <executions>
            <execution>
              <id>enforce-versions</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <!-- We use compiler source/target 8 -> enforce Java 8+ -->
                  <requireJavaVersion>
                    <version>1.8</version>
                  </requireJavaVersion>
                  <!-- maven.multiModuleProjectDirectory: introduced in 3.3.1, important bug fix in 3.3.9 -->
                  <requireMavenVersion>
                    <version>3.3.9</version>
                  </requireMavenVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <!-- Version 3.2.0 fixes goal 'rootlocation' -->
          <version>3.2.0</version>
        </plugin>

        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>

        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>

      </plugins>
    </pluginManagement>

    <plugins>

      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>set-project-root-dir</id>
            <phase>validate</phase>
            <goals>
              <goal>rootlocation</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>

    </plugins>

  </build>

  <dependencyManagement>
    <dependencies>

      <!-- ByteBuddy -->
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy</artifactId>
        <version>${bytebuddy.version}</version>
      </dependency>
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy-agent</artifactId>
        <version>${bytebuddy.version}</version>
      </dependency>
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy-dep</artifactId>
        <version>${bytebuddy.version}</version>
      </dependency>

      <!-- Javassist -->
      <dependency>
        <!-- TODO: remove after fix for https://github.com/jboss-javassist/javassist/issues/328 is released-->
        <groupId>de.scrum-master.org.javassist</groupId>
        <!--<groupId>org.javassist</groupId>-->
        <artifactId>javassist</artifactId>
        <version>${javassist.version}</version>
      </dependency>

      <!-- Objenesis, used for creating injectable mocks for final classes  -->
      <dependency>
        <groupId>org.objenesis</groupId>
        <artifactId>objenesis</artifactId>
        <version>${objenesis.version}</version>
      </dependency>

      <!-- Internal dependencies -->
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-unfinal</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-unfinal-plugin</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-aspect</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-constructor-mock</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-constructor-mock-javassist</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-mock</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-common</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-agent-common</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-attach</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- Test dependencies -->
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit4.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>${junit5.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>${junit5.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>${testng.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-test-common</artifactId>
        <version>${project.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-test-instrument-jre</artifactId>
        <version>${project.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-junit4-runner</artifactId>
        <version>${project.version}</version>
        <scope>test</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!--
      Define globally here because otherwise Surefire/Failsafe groups/excludedGroups would not work.
      This will not be fixed, see https://issues.apache.org/jira/browse/SUREFIRE-1266.
    -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>sonatype-oss-release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <executions>
              <!-- Create an aggregate Javadoc JAR -->
              <!-- TODO: Can this be generated for uber JARs too? -->
              <execution>
                <id>create-aggregate-javadoc-jar</id>
                <goals>
                  <goal>aggregate-jar</goal>
                </goals>
                <configuration>
                  <excludePackageNames>org.acme</excludePackageNames>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <pluginRepositories>
    <!-- TODO: As soon as the next Surefire milestone is available on Maven Central, get rid of this repository -->
    <!--
    <pluginRepository>
      <id>maven-1575</id>
      <url>https://repository.apache.org/content/repositories/maven-1575/</url>
    </pluginRepository>
    -->
    <!--
    <pluginRepository>
      <id>apache-snapshots</id>
      <url>https://repository.apache.org/content/groups/snapshots</url>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </pluginRepository>
    -->
  </pluginRepositories>

  <modules>
    <module>sarek</module>
    <module>sarek-special</module>
    <module>sarek-common</module>
    <module>sarek-unfinal</module>
    <module>sarek-unfinal-special</module>
    <module>sarek-unfinal-plugin</module>
    <module>sarek-aspect</module>
    <module>sarek-constructor-mock</module>
    <module>sarek-constructor-mock-javassist</module>
    <module>sarek-mock</module>
    <module>sarek-agent-common</module>
    <module>sarek-attach</module>
    <module>sarek-test-extensions-parent</module>
    <module>sarek-test-parent</module>
  </modules>

</project>
