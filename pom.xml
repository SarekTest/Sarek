<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>dev.sarek</groupId>
  <artifactId>sarek-parent</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <organization>
    <name>Scrum-Master.de - Agile Project Management</name>
    <url>https://scrum-master.de</url>
  </organization>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>

    <bytebuddy.version>1.10.13</bytebuddy.version>
    <javassist.version>3.27.0-GA</javassist.version>
    <objenesis.version>3.1</objenesis.version>

    <!--
      Defined by build-helper:rootlocation.
      Unfortunately, for IntelliJ IDEA we still need "-DprojectRootDir=..." in <projectRootDir>/.mvn/jvm.config.
    -->
    <!--suppress UnresolvedMavenProperty -->
    <projectRootDir>${rootlocation}</projectRootDir>

    <sarek.jar>
      ${projectRootDir}/sarek/target/sarek-${project.version}.jar
    </sarek.jar>
    <sarek-special.jar>
      ${projectRootDir}/sarek-special/target/sarek-special-${project.version}.jar
    </sarek-special.jar>
    <unfinal.jar>
      ${projectRootDir}/sarek-unfinal/target/sarek-unfinal-${project.version}.jar
    </unfinal.jar>
    <unfinal-special.jar>
      ${projectRootDir}/sarek-unfinal-special/target/sarek-unfinal-special-${project.version}.jar
    </unfinal-special.jar>
    <instrumented-jre.jar>
      ${projectRootDir}/sarek-test-parent/sarek-test-instrument-jre/target/sarek-test-instrument-jre-${project.version}.jar
    </instrumented-jre.jar>

  </properties>

  <build>
    <pluginManagement>
      <plugins>

        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.2.0</version>
          <configuration>
            <archive>
              <addMavenDescriptor>false</addMavenDescriptor>
            </archive>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.2.0</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <phase>package</phase>
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <!--
            TODO:
              - Switch to next milestone or stable release as soon as available on Maven Central
              - Attention: 3.0.0-RC1 is changing + unstable, e.g. freezes when running ITs with active agents
              - Attention: M5 has the same problems as RC1, see https://issues.apache.org/jira/browse/SUREFIRE-1788
          -->
          <!--<version>3.0.0-RC1</version>-->
          <version>3.0.0-M4</version>
          <configuration>
            <!-- Fix for "[WARNING] Corrupted STDOUT by directly writing to native stream in forked JVM" -->
            <!--<forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>-->
            <systemPropertyVariables>
              <sarek.jar>${sarek.jar}</sarek.jar>
              <sarek-special.jar>${sarek-special.jar}</sarek-special.jar>
              <unfinal.jar>${unfinal.jar}</unfinal.jar>
              <unfinal-special.jar>${unfinal-special.jar}</unfinal-special.jar>
            </systemPropertyVariables>
          </configuration>
          <executions>
            <execution>
              <id>reuse-jvm</id>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <!-- One JVM for multiple test classes -->
                <reuseForks>true</reuseForks>
                <excludedGroups>dev.sarek.test.util.SeparateJVM</excludedGroups>
              </configuration>
            </execution>
            <execution>
              <id>separate-jvm</id>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <!-- One JVM per test class (per method is not possible) -->
                <reuseForks>false</reuseForks>
                <groups>dev.sarek.test.util.SeparateJVM</groups>
              </configuration>
            </execution>
            <!-- We have two other, mutually exclusive text executions already and do not need this one -->
            <execution>
              <!-- We have two other, mutually exclusive text executions already and do not need this one -->
              <id>default-test</id>
              <phase>none</phase>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <!--
            TODO:
              - Switch to next milestone or stable release as soon as available on Maven Central
              - Attention: 3.0.0-RC1 is changing + unstable, e.g. freezes when running ITs with active agents
              - Attention: M5 has the same problems as RC1, see https://issues.apache.org/jira/browse/SUREFIRE-1788
          -->
          <!--<version>3.0.0-RC1</version>-->
          <version>3.0.0-M4</version>
          <configuration>
            <!-- Fix for "[WARNING] Corrupted STDOUT by directly writing to native stream in forked JVM" -->
            <!--<forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>-->
            <systemPropertyVariables>
              <sarek.jar>${sarek.jar}</sarek.jar>
              <sarek-special.jar>${sarek-special.jar}</sarek-special.jar>
              <unfinal.jar>${unfinal.jar}</unfinal.jar>
              <unfinal-special.jar>${unfinal-special.jar}</unfinal-special.jar>
            </systemPropertyVariables>
          </configuration>
          <executions>
            <execution>
              <id>reuse-jvm</id>
              <goals>
                <goal>integration-test</goal>
              </goals>
              <configuration>
                <!-- One JVM for multiple test classes -->
                <reuseForks>true</reuseForks>
                <excludedGroups>dev.sarek.test.util.SeparateJVM</excludedGroups>
              </configuration>
            </execution>
            <execution>
              <id>separate-jvm</id>
              <goals>
                <goal>integration-test</goal>
              </goals>
              <configuration>
                <!-- One JVM per test class (per method is not possible) -->
                <reuseForks>false</reuseForks>
                <groups>dev.sarek.test.util.SeparateJVM</groups>
              </configuration>
            </execution>
            <execution>
              <goals>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>

        <plugin>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.2.3</version>
          <configuration>
            <createSourcesJar>true</createSourcesJar>
            <createDependencyReducedPom>false</createDependencyReducedPom>
            <shadedArtifactAttached>false</shadedArtifactAttached>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>1.2.2</version>
          <executions>
            <!-- Remove shaded dependencies from uber JAR -->
            <execution>
              <id>flatten</id>
              <phase>process-resources</phase>
              <goals>
                <goal>flatten</goal>
              </goals>
              <configuration>
                <flattenMode>oss</flattenMode>
                <pomElements>
                  <dependencies>remove</dependencies>
                </pomElements>
                <outputDirectory>${project.build.directory}</outputDirectory>
                <flattenedPomFilename>flattened-pom.xml</flattenedPomFilename>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.0.0-M3</version>
          <executions>
            <execution>
              <id>enforce-versions</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <!-- We use compiler source/target 8 -> enforce Java 8+ -->
                  <requireJavaVersion>
                    <version>1.8</version>
                  </requireJavaVersion>
                  <!-- maven.multiModuleProjectDirectory: introduced in 3.3.1, important bug fix in 3.3.9 -->
                  <requireMavenVersion>
                    <version>3.3.9</version>
                  </requireMavenVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <!-- Version 3.2.0 fixes goal 'rootlocation' -->
          <version>3.2.0</version>
        </plugin>

        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>

        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>

      </plugins>
    </pluginManagement>

    <plugins>

      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>set-project-root-dir</id>
            <phase>validate</phase>
            <goals>
              <goal>rootlocation</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>

    </plugins>

  </build>

  <dependencyManagement>
    <dependencies>

      <!-- ByteBuddy -->
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy</artifactId>
        <version>${bytebuddy.version}</version>
      </dependency>
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy-agent</artifactId>
        <version>${bytebuddy.version}</version>
      </dependency>
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy-dep</artifactId>
        <version>${bytebuddy.version}</version>
      </dependency>

      <!-- Javassist -->
      <dependency>
        <groupId>org.javassist</groupId>
        <artifactId>javassist</artifactId>
        <version>${javassist.version}</version>
      </dependency>

      <!-- Objenesis, used for creating injectable mocks for  final classes  -->
      <dependency>
        <groupId>org.objenesis</groupId>
        <artifactId>objenesis</artifactId>
        <version>${objenesis.version}</version>
      </dependency>

      <!-- Internal dependencies -->
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-unfinal</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-unfinal-plugin</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-aspect</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-constructor-mock</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-constructor-mock-javassist</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-mock</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-common</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-agent-common</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- Test dependencies -->
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-test-common</artifactId>
        <version>${project.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-test-instrument-jre</artifactId>
        <version>${project.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>dev.sarek</groupId>
        <artifactId>sarek-junit4-runner</artifactId>
        <version>${project.version}</version>
        <scope>test</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!--
      Define globally here because otherwise Surefire/Failsafe groups/excludedGroups would not work.
      This will not be fixed, see https://issues.apache.org/jira/browse/SUREFIRE-1266.
    -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <pluginRepositories>
    <!-- TODO: As soon as the next Surefire milestone is available on Maven Central, get rid of this repository -->
    <!--
    <pluginRepository>
      <id>maven-1575</id>
      <url>https://repository.apache.org/content/repositories/maven-1575/</url>
    </pluginRepository>
    -->
    <!--
    <pluginRepository>
      <id>apache-snapshots</id>
      <url>https://repository.apache.org/content/groups/snapshots</url>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </pluginRepository>
    -->
  </pluginRepositories>

  <modules>
    <module>sarek</module>
    <module>sarek-special</module>
    <module>sarek-common</module>
    <module>sarek-unfinal</module>
    <module>sarek-unfinal-special</module>
    <module>sarek-unfinal-plugin</module>
    <module>sarek-aspect</module>
    <module>sarek-constructor-mock</module>
    <module>sarek-constructor-mock-javassist</module>
    <module>sarek-mock</module>
    <module>sarek-agent-common</module>
    <module>sarek-junit4-runner</module>
    <module>sarek-test-parent</module>
  </modules>

</project>
